!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.fsmy=e():t.fsmy=e()}(window,(function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e),n.d(e,"FSM",(function(){return o}));class o{constructor(t,e){this._transitions=t,this._transitionInProcess=!1,this.transition(e)}goto(t,e){this._currentState=null,this.transition(t,e)}dispose(){this.onEnterState=null,this.onLeaveState=null,this.getStateName=null,this._transitions=null}transition(t,e){setTimeout(async()=>{var n,o;const r=this._currentState,i=this.getStateName&&this.getStateName(r)||r,a=this.getStateName&&this.getStateName(t)||t;if(this._transitionInProcess)console.error("transition in process to "+i);else if(this.canTransition(t)){this._currentState=t,console.log(`transition from ${i} to ${a}`);const{onLeaveStateStart:s,onLeaveStateEnd:u}=(null===(n=this._transitions[r])||void 0===n?void 0:n.state)||{},{onEnterStateStart:c,onEnterStateEnd:l}=(null===(o=this._transitions[t])||void 0===o?void 0:o.state)||{},{onEnterState:f,onLeaveState:d}=this;this._transitionInProcess=!0,await Promise.all([d&&d({from:r,to:t,data:e}),s&&s({from:r,to:t,data:e})]),u&&await u({from:r,to:t,data:e}),await Promise.all([f&&f({from:r,to:t,data:e}),c&&c({from:r,to:t,data:e})]),l&&await l({from:r,to:t,data:e}),this._transitionInProcess=!1}else console.error(`Can't transition from ${i} to ${a}`)})}getCurrentState(){return this._currentState}canTransition(t){return!this._currentState||this._transitions[this._currentState].to.indexOf(t)>-1}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,