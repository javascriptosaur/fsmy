// Generated by dts-bundle v0.7.3

declare module 'fsmy' {
    export { default as IState } from 'fsmy/IState';
    export { default as FSM } from 'fsmy/FSM';
}

declare module 'fsmy/IState' {
    export default interface IState<T> {
        onEnterStateStart?: (obj?: {
            from: T;
            to: T;
            data?: {};
        }) => Promise<void> | void;
        onEnterStateEnd?: (obj?: {
            from: T;
            to: T;
            data?: {};
        }) => Promise<void> | void;
        onLeaveStateStart?: (obj?: {
            from: T;
            to: T;
            data?: {};
        }) => Promise<void> | void;
        onLeaveStateEnd?: (obj?: {
            from: T;
            to: T;
            data?: {};
        }) => Promise<void> | void;
    }
}

declare module 'fsmy/FSM' {
    import { Transitions } from "fsmy/Transitions";
    export default class FSM<T extends string | number> {
        onEnterState: (obj?: {
            from: T;
            to: T;
            data?: {};
        }) => Promise<void> | void;
        onLeaveState: (obj?: {
            from: T;
            to: T;
            data?: {};
        }) => Promise<void> | void;
        getStateName: (key: T) => string;
        constructor(_transitions: Transitions<T>, initState: T);
        goto(state: T, data?: {}): void;
        dispose(): void;
        transition(to: T, data?: {}): void;
        getCurrentState(): T;
        canTransition(state: T): boolean;
    }
}

declare module 'fsmy/Transitions' {
    import IState from "fsmy/IState";
    export type Transitions<T extends string | number> = {
        [S in T]: {
            name?: string;
            to: T[];
            state: IState<T>;
        };
    };
}

